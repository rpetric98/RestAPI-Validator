@{
    ViewData["Title"] = "Flight";
}

<div class="container mt-5">
    <h2 class="text-center">FlightsApp</h2>

    <div id="message" class="alert d-none mt-3"></div>

    <hr />
    <h4>Upload XML (XSD)</h4>
    <form id="formXSD" asp-controller="Flight" asp-action="ValidateXSD" method="post" enctype="multipart/form-data">
        <input type="file" name="file" accept=".xml" class="form-control" required />
        <button type="submit" class="btn btn-primary mt-2">Upload XSD</button>
    </form>

    <hr />
    <h4>Upload XML (RNG)</h4>
    <form id="formRNG" asp-controller="Flight" asp-action="ValidateRNG" method="post" enctype="multipart/form-data">
        <input type="file" name="file" accept=".xml" class="form-control" required />
        <button type="submit" class="btn btn-primary mt-2">Upload RNG</button>
    </form>

    <hr />
<h4>Search Flights</h4>
<form id="searchForm" class="mb-3">
    <input type="text" name="searchTerm" id="searchTerm" class="form-control" placeholder="Enter search term (e.g. ZAG, LHR, US)" required />
    <button type="submit" class="btn btn-success mt-2">Search</button>
</form>

<div id="searchResults" class="mt-4">
    <h5>Search Results (XML):</h5>
    <pre id="xmlOutput" class="bg-light p-3 border rounded" style="white-space: pre-wrap;"></pre>
</div>

</div>

@section Scripts {
    <script>
        function handleFormSubmit(formId) {
            const form = document.getElementById(formId);
            form.addEventListener('submit', async function (e) {
                e.preventDefault();

                const messageDiv = document.getElementById('message');
                messageDiv.classList.add('d-none');
                messageDiv.classList.remove('alert-success', 'alert-danger');
                messageDiv.textContent = '';

                const formData = new FormData(form);
                try {
                    const response = await fetch(form.action, {
                        method: 'POST',
                        body: formData
                    });

                    const contentType = response.headers.get('content-type') || '';
                    let data;

                    if (contentType.includes('application/json')) {
                        data = await response.json();
                    } else {
                        data = await response.text();
                    }

                    if (response.ok) {
                        messageDiv.textContent = (data.Message || "Upload successful!");
                        messageDiv.classList.add('alert-success');
                        messageDiv.classList.remove('d-none');
                    } else {
                        if (typeof data === 'object') {
                            messageDiv.textContent = JSON.stringify(data, null, 2);
                        } else {
                            messageDiv.textContent = data;
                        }
                        messageDiv.classList.add('alert-danger');
                        messageDiv.classList.remove('d-none');
                    }
                } catch (error) {
                    messageDiv.textContent = "Network or server error: " + error.message;
                    messageDiv.classList.add('alert-danger');
                    messageDiv.classList.remove('d-none');
                }
            });
        }

        handleFormSubmit('formXSD');
        handleFormSubmit('formRNG');
        document.getElementById("searchForm").addEventListener("submit", async function (e) {
            e.preventDefault();
            const term = document.getElementById("searchTerm").value;
            const output = document.getElementById("xmlOutput");
            output.textContent = "Searching...";

            try {
                const soapUrl = '/FlightService.svc';

                const soapBody = `
                        <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://tempuri.org/">
                            <soapenv:Header/>
                            <soapenv:Body>
                                        <ser:SearchFlights>
                                    <ser:searchTerm>${term}</ser:searchTerm>
                                        </ser:SearchFlights>
                            </soapenv:Body>
                        </soapenv:Envelope>
                    `;

                const response = await fetch(soapUrl, {
                    method: "POST",
                    headers: {
                        "Content-Type": "text/xml; charset=utf-8",
                        "SOAPAction": "http://tempuri.org/IFlightService/SearchFlights"
                    },
                    body: soapBody
                });

                const text = await response.text();

                if (response.ok) {
                    output.textContent = formatXml(text);
                } else {
                    output.textContent = "Error: " + text;
                }
            } catch (err) {
                output.textContent = "Request failed: " + err.message;
            }
        });

        function formatXml(xml) {
            const PADDING = "  ";
            const reg = /(>)(<)(\/*)/g;
            let formatted = "";
            let pad = 0;

            xml = xml.replace(reg, "$1\r\n$2$3");
            xml.split("\r\n").forEach((node) => {
                let indent = 0;
                if (node.match(/.+<\/\w[^>]*>$/)) {
                    indent = 0;
                } else if (node.match(/^<\/\w/)) {
                    if (pad !== 0) pad -= 1;
                } else if (node.match(/^<\w([^>]*[^\/])?>.*$/)) {
                    indent = 1;
                } else {
                    indent = 0;
                }

                formatted += PADDING.repeat(pad) + node + "\r\n";
                pad += indent;
            });

            return formatted;
        }
    </script>
}